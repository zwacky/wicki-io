<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Simon Wicki â€” Frontend Engineer from Berlin</title>
    <link>https://wicki.io/posts/</link>
    <description>Recent content in Blog posts on Simon Wicki â€” Frontend Engineer from Berlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wicki.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Duality of CLS with Lazy Loading Components</title>
      <link>https://wicki.io/posts/2022-03-cls-with-lazy-loading-components/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2022-03-cls-with-lazy-loading-components/</guid>
      <description>When you optimise your web app, your goal is to make the experience better for the user: That means usually &amp;lsquo;faster&amp;rsquo; by transferring and parsing less data. But caution: The same web app can cause Cumulative Layout Shift (CLS) on slower connections but runs without CLS on faster connection.
If you&amp;rsquo;d like a refresher about Core Web Vitals, I explained them with GIFs in this post.
TL;DR: slower connections can result in CLS when lazy loading components that you wouldn&amp;rsquo;t see on wifi connections.</description>
    </item>
    
    <item>
      <title>Sued by Using Google Fonts: Data Privacy and GDPR</title>
      <link>https://wicki.io/posts/2022-02-goodbye-google-fonts-data-privacy-gdpr/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2022-02-goodbye-google-fonts-data-privacy-gdpr/</guid>
      <description>The German court has ruled last month that Google Fonts is not in compliance with GDPR.
 The integration of dynamic web content such as Google Fonts from US web services is illegal without the consent of the visitor.
 A website operator received a fine of 100â‚¬. The Munich court clearly wanted to set an example. They even mentioned the next fine will be 250.000â‚¬ for the website operator if they don&amp;rsquo;t comply.</description>
    </item>
    
    <item>
      <title>An Ode to AngularJS</title>
      <link>https://wicki.io/posts/2022-01-an-ode-to-angularjs/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2022-01-an-ode-to-angularjs/</guid>
      <description>In remembrance of my first love.
Your LTS came finally to an end. You retired on 31st December 2021. You will always have a special place in my heart.  You arrived with great anticipation,
Put the web dev world upside down;
Model, View and Controller were in separation,
Even Javascript beginners didn&amp;rsquo;t frown.
Be it JavaScript, CoffeeScript or SCSS,
You handled them all in a snap;
Grunt helped you to transpile and compress,</description>
    </item>
    
    <item>
      <title>Interface vs Type Alias in TypeScriptâ€”Quick Comparison</title>
      <link>https://wicki.io/posts/2022-01-quick-comparison-interface-vs-type-alias/</link>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2022-01-quick-comparison-interface-vs-type-alias/</guid>
      <description>This can be confusing for anyone working with TypeScriptâ€”beginner or seasoned programmer. Both ways can cover similar needs.
In this post you&amp;rsquo;ll quickly see what Typescript feature is possible to implement as Type Alias or Interface. I stayed brief and spicy to give the post an overview character.
ðŸ‘‰ TLDR: You don&amp;rsquo;t care about each difference? What should you use?
 Use interface until you need type
â€”orta</description>
    </item>
    
    <item>
      <title>One Font Format to Rule Them All: WOFF2</title>
      <link>https://wicki.io/posts/2021-11-woff2-one-font-format-to-rule-them-all/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-11-woff2-one-font-format-to-rule-them-all/</guid>
      <description>Learn why WOFF2, and WOFF as a fallback, is the only font format you need.
If you&amp;rsquo;ve been around as a web developer for some time, you&amp;rsquo;ve seen these font formats in your CSS. Here&amp;rsquo;s an example for a self-hosted Raleway font:
@font-face { font-family: &amp;#39;Raleway&amp;#39;; font-style: normal; font-weight: 400; src: url(&amp;#39;../fonts/raleway-v22-latin-regular.eot&amp;#39;); /* IE9 Compat Modes */ src: local(&amp;#39;&amp;#39;), url(&amp;#39;../fonts/raleway-v22-latin-regular.eot?#iefix&amp;#39;) format(&amp;#39;embedded-opentype&amp;#39;), /* IE6-IE8 */ url(&amp;#39;../fonts/raleway-v22-latin-regular.woff2&amp;#39;) format(&amp;#39;woff2&amp;#39;), /* Super Modern Browsers */ url(&amp;#39;.</description>
    </item>
    
    <item>
      <title>Keep Your Javascript Bundle Size in Check</title>
      <link>https://wicki.io/posts/2021-08-keep-your-bundle-size-in-check/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-08-keep-your-bundle-size-in-check/</guid>
      <description>Are you a developer who is concerned about the size of newly added libraries? Or do you want to find a culprit in a rather big Javascript bundle?
If you&amp;rsquo;re like me, then you answered yes to both questions.
In this post I&amp;rsquo;ll cover a few tools that come in handy for a quick analysis of bundle sizes without changing or ejecting your build architecture.
 VS Code extension: Import Cost   Immediately see the weight of what you import in VS Code.</description>
    </item>
    
    <item>
      <title>Accurate Daily Measurements of Core Web Vitals with Google Analytics</title>
      <link>https://wicki.io/posts/2021-08-accurate-core-web-vitals-measurements/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-08-accurate-core-web-vitals-measurements/</guid>
      <description>Have you ever optimised your website for the Core Web Vitals (CWV)? Did you want to check your changes the next dayâ€”but Google&amp;rsquo;s various tools don&amp;rsquo;t give you current daily CWV metrics due to the rolling 28-day window?
In this post I&amp;rsquo;ll review Google&amp;rsquo;s toolset for measuring CWV and explain how to see if your changes had any effect on CWV day by day with Google Analytics (GA).
 Accurate daily CWV measurements: Create your report   3-step workflow to get your daily accurate CWV report.</description>
    </item>
    
    <item>
      <title>How List Rendering Can Cause Huge Cumulative Layout Shift</title>
      <link>https://wicki.io/posts/2021-07-list-rendering-cls/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-07-list-rendering-cls/</guid>
      <description>JS frameworks like Vue can give elements a unique key. In a list rendering they might be able to reuse these keyed list items, when the list is changing. The already created DOM nodes don&amp;rsquo;t need to be recreated. This is a great performance gain. But when a list changes and the nodes merely switch their position, the keyed items can be considered as a shift in the DOM (CLS) by Core Web Vitals on slow connection devices.</description>
    </item>
    
    <item>
      <title>Core Web Vitals explained with GIFs</title>
      <link>https://wicki.io/posts/2021-07-core-web-vitals/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-07-core-web-vitals/</guid>
      <description>Passing your Core Web Vitals and google will reward you with visibility.
  With Google&amp;rsquo;s June 2021 update Core Web Vitals (CWV) will become a factor in SEO ranking. It measures the quality of a site by these three metrics: LCP, FID and CLS.
If you pass all of them them, Google will reward you with more visibility.
You can check how well you do on these metrics via several ways:</description>
    </item>
    
    <item>
      <title>Pimp Your GitHub Profile with Books You Read</title>
      <link>https://wicki.io/posts/2021-04-goodreads-workflow-for-github-actions/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-04-goodreads-workflow-for-github-actions/</guid>
      <description>Keep the books you read in sync with your GitHub profile README
  In this post I&amp;rsquo;d like to show you how to use GitHub Actions to automatically sync your Goodreads books you read in your GitHub profile README.
I created goodreads-profile-workflow for devs that love to read and like to share what they read. You can customise the input parameters to your liking: list the books you&amp;rsquo;re currently reading, last 5 books you read and even add your personal ratings, too.</description>
    </item>
    
    <item>
      <title>Useful Npx Packages for the Developer&#39;s Everyday Life</title>
      <link>https://wicki.io/posts/2021-02-useful-npx-packages/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2021-02-useful-npx-packages/</guid>
      <description>Npm comes with a neat tool called npx that lets you directly execute packages from the npm registry. It temporarily downloads it behind the scene and won&amp;rsquo;t pollute your local or global npm environment.
In this post I&amp;rsquo;ll skip useful packages that are bound to libraries and frameworks like Angular&amp;rsquo;s ng, react&amp;rsquo;s create-react-app or capacitor&amp;rsquo;s cap.
I focus on packages that have helped me through my daily life as a developer.</description>
    </item>
    
    <item>
      <title>Time to Say Goodbye to Google Fonts: Cache Performance</title>
      <link>https://wicki.io/posts/2020-11-goodbye-google-fonts/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2020-11-goodbye-google-fonts/</guid>
      <description>I&amp;rsquo;ve used Google Fonts in prototypes and in 10M+ MAU products. It&amp;rsquo;s incredibly easy to get started with and provides an amazing font discovery. That&amp;rsquo;s also why it&amp;rsquo;s currently still used on over 42M websites!
This convenience has its price: Performance. Many have already pointed out the cost of multiple requests. If you want the remaining speed boost, then you&amp;rsquo;re best off downloading your used Google Fonts and self-host them.</description>
    </item>
    
    <item>
      <title>My Top 5 Book Recommendations</title>
      <link>https://wicki.io/posts/2020-09-my-top-5-book-recommendations/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2020-09-my-top-5-book-recommendations/</guid>
      <description>I love reading booksâ€”I read through 1-4 books a month. That wasn&amp;rsquo;t always the case. If you saw my home just two years ago you wouldn&amp;rsquo;t have found any books. Back then I read a few blog posts online and that was it. I never felt the need to read pieces of paper bundled together.
&amp;hellip;Until I tried it. I first tried it with a book called Factfulness by Hans Rosling.</description>
    </item>
    
    <item>
      <title>Stats and Learnings from Finishing #11 on Product Hunt</title>
      <link>https://wicki.io/posts/2020-06-stats-and-learnings-from-finishing-11-on-product-hunt/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2020-06-stats-and-learnings-from-finishing-11-on-product-hunt/</guid>
      <description>I launched Notyfy on Product Hunt on 7th of May.
  My first Product Hunt Launch ðŸŽ‰â€”a lot of time went into the preparation together with my friend Peter ðŸ‘‹. Read on to see what stats and learnings finishing #11 on Product Hunt brings.
Notyfy Let me quickly run you through what the product is that I launched on Product Hunt:
Notyfy is a browser extension that aggregates web notifications from Twitter, Reddit, Facebook and many more in one place.</description>
    </item>
    
    <item>
      <title>&#34;Hybrid Apps are slow&#34;</title>
      <link>https://wicki.io/posts/2019-11-hybrid-apps-are-slow/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2019-11-hybrid-apps-are-slow/</guid>
      <description>â€¦and other things Iâ€™ve heard regarding Hybrid App development.
Letâ€™s talk about the elephant in the room: Performance. Let me just show you how fast and smooth Hybrid apps can be based on this footage of my last work: JustWatch, a streaming search engine with 12M monthly active users. Itâ€™s been recorded on a OnePlus 6 (May 2018).
  &amp;ldquo;Hybrid Apps will never be faster than native&amp;rdquo; Yes, this is true.</description>
    </item>
    
    <item>
      <title>Using Firebase with webpack? You might be able to save 220kb</title>
      <link>https://wicki.io/posts/2017-08-using-firebase-you-might-be-able-to-save-220kb/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2017-08-using-firebase-you-might-be-able-to-save-220kb/</guid>
      <description>MARCH 2020 UPDATE: The new Firebase JS SDK Alpha makes your bundle up to 80% smaller! It now fully adopts tree-shaking and lets you import only what you truly need.
 In a lot of tutorials I came across the comfortable solution of just adding import * as firebase from &amp;lsquo;firebase&amp;rsquo; for your firebase import. As it turns out, there are 4 modular packages for Firebase. Here they are along with their sizes:</description>
    </item>
    
    <item>
      <title>Add ES7 Async/Await Support for your Webapp in 3 Easy Steps</title>
      <link>https://wicki.io/posts/2017-06-add-es7-async-await-support-into-your-non-bleeding-edge-build-process/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2017-06-add-es7-async-await-support-into-your-non-bleeding-edge-build-process/</guid>
      <description>Nearly all evergreen browsers support Async/Await natively
  Async/Await has been around the block already some time. Now that it is in stage-4 since July 2016 (stage finished in the ECMAScript proposals) and nearly all evergreen browsers support it natively, too (except IE is late to the party as usual ðŸ˜ª) â€” itâ€™s definitely time to take a second look.
TL;DR I WANT ASYNC/AWAIT SUPPORT NAO!!1  use babel-preset-env yarn add regenerator or npm install regenerator add node_modules/regenerator-runtime/runtime.</description>
    </item>
    
    <item>
      <title>PWA: Create a &#34;New Update Available&#34; Notification using Service Workers</title>
      <link>https://wicki.io/posts/2017-06-pwa-create-a-new-update-available-notification-using-service-workers/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2017-06-pwa-create-a-new-update-available-notification-using-service-workers/</guid>
      <description>New Update available popup.
  PWAs are getting more and more coverage and support. They improve the web experience and can load your app instantly with their great ability for HTTP caching (among other things, but this post only covers caching).
The thing with Offline-First is, that you cache all the resources that are needed for launching up the webapp â€” even your index.html!
 Note: No sweat!</description>
    </item>
    
    <item>
      <title>iOS &amp; Android Native Build Errors with Cordova Plugins</title>
      <link>https://wicki.io/posts/2017-03-ios-android-native-build-errors-with-cordova-plugins/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2017-03-ios-android-native-build-errors-with-cordova-plugins/</guid>
      <description>Lately I encountered some native build errors that slowed me down quite a bit. Here is an overview of some of them, their issue and solution which might save you some time if you come across one of the following native errors:
 iOS: â€˜GoogleCloudMessaging.hâ€™ file not found iOS: Duplicate Symbols Android: safeparcel.AbstractSafeParcelable not found Android: Force Close due to phonegap-push-plugin    iOS: â€˜GoogleCloudMessaging.hâ€™ file not found error: â€˜GoogleCloudMessaging.</description>
    </item>
    
    <item>
      <title>Angularâ€™s ng-repeat Finish Event</title>
      <link>https://wicki.io/posts/2015-09-angular-s-ng-repeat-finish-event/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2015-09-angular-s-ng-repeat-finish-event/</guid>
      <description>Demo https://jsbin.com/gutahovufe/1/edit?html,js,output
Explanation Sometimes you need to execute code after your list has been rendered on the client side.
// js angular.module(&amp;#39;ngRepeatDemo&amp;#39;, []) .controller(&amp;#39;AppCtrl&amp;#39;, function() { var vm = this; vm.alphabet = [ &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;j&amp;#39;, &amp;#39;k&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;q&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;v&amp;#39;, &amp;#39;w&amp;#39;, &amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39; ]; vm.finished = function() { alert(&amp;#39;fired&amp;#39;); // now javascript execution has been stopped and you should see all DOM nodes been created  // note: interpolation may not have been done completely  }; }); &amp;lt;!</description>
    </item>
    
    <item>
      <title>Laravel Redirect::to() vs Redirect::away()</title>
      <link>https://wicki.io/posts/2014-09-laravel-redirect-to-vs-redirect-away/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2014-09-laravel-redirect-to-vs-redirect-away/</guid>
      <description>For external redirection
The use case here is to redirect the user to another domain. I havenâ€™t come across Redirect::away() before, even though itâ€™s been added in Laravel 4.0.8.
Redirect::to()   Redirect::away()   Difference Redirect::to() does additional URL checks and generations. Those additional steps are done in Illuminate\Routing\UrlGenerator and do the following, if the passed URL is not a fully valid URL (even with protocol):
 Determines if URL is secure rawurlencode() the URL trim() URL  </description>
    </item>
    
    <item>
      <title>4 Very Useful Chrome Dev Tool Commands</title>
      <link>https://wicki.io/posts/2014-07-very-useful-chrome-dev-tool-commands/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2014-07-very-useful-chrome-dev-tool-commands/</guid>
      <description>$_ â€” last output maybe you don&amp;rsquo;t want to store results in a variable for quick calculations and just want to chain those computations.
  $0 â€” currently inspected element useful if you want to output or alter the selected element.
  angular.element($0).scope() â€” get AngularJS&amp;rsquo;s scope combined with $(0) this makes a great use to inspect a specific element and then check what it&amp;rsquo;s scope looks like.</description>
    </item>
    
    <item>
      <title>Laravel&#39;s URL::to() vs URL::asset()</title>
      <link>https://wicki.io/posts/2014-04-laravels-url-to-vs-url-asset/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2014-04-laravels-url-to-vs-url-asset/</guid>
      <description>Short answer: No, not really.
You want to have the following code:
&amp;lt;script src=&amp;#34;js/bootstrap.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Now you can achieve this using blade syntax:
// using URL::to() &amp;lt;script src=&amp;#34;{{ URL::to(&amp;#39;js/bootstrap.js&amp;#39;) }}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; // using URL::asset() &amp;lt;script src=&amp;#34;{{ URL::asset(&amp;#39;js/bootstrap.js&amp;#39;) }}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; URL::to() The method is implemented like this:
  URL::asset() The method is implemented like this:
  Difference Both methods get the job done.
 URL::to() additionally encodes the segments of the passed url with rawurlencode URL::asset() removes index.</description>
    </item>
    
    <item>
      <title>Design a beautiful REST API</title>
      <link>https://wicki.io/posts/2013-12-design-a-beautiful-rest-api/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://wicki.io/posts/2013-12-design-a-beautiful-rest-api/</guid>
      <description>Every dev at some point has made decisions how his backend API should look like. If youâ€™re coming from the web, then mostly for ajax calls. But what if that API should also address calls from other sources and clients.
To fill that gap i was watching an informative talk by Les Hazlewood about beautiful RESTful. Iâ€™ll cut this in several sections. This is merely an overview, the full coverage you can get from the youtube talk or the slides.</description>
    </item>
    
  </channel>
</rss>
